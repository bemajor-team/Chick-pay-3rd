kind: pipeline
type: docker
name: deploy-for-main

steps:

  # 1. Docker Build & Push to ECR (ÏàòÏ†ï)
  - name: docker-build-push
    image: amazon/aws-cli
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      region: ap-northeast-2
    commands:
      - aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 297195401389.dkr.ecr.ap-northeast-2.amazonaws.com
      - docker build -t 297195401389.dkr.ecr.ap-northeast-2.amazonaws.com/zapp:latest .
      - docker push 297195401389.dkr.ecr.ap-northeast-2.amazonaws.com/zapp:latest

  # 2. ECS ÏÑúÎπÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏
  - name: deploy-ecs
    image: amazon/aws-cli
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      region: ap-northeast-2
    commands:
      - aws ecs update-service --cluster ChickCluster --service ChickTask-service-DJANGO --force-new-deployment

  # 3. ZAP ÏûêÎèôÌôî Ïä§Ï∫î
  - name: zap-full-automation
    image: appleboy/drone-ssh
    environment:
      ZAP_USERNAME:
        from_secret: ZAP_USERNAME
      ZAP_PASSWORD:
        from_secret: ZAP_PASSWORD
    settings:
      host:
        from_secret: drone_ec2
      username: ubuntu
      key:
        from_secret: drone_ec2_ssh_key
      port: 22
      script:
        - cd /home/ubuntu/zap
        - docker run --rm -v $(pwd):/zap/wrk/:rw --memory=1.5g --cpus=2 ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -autorun /zap/wrk/zap-automation.yaml
        - |
          echo "üîé JSON Î¶¨Ìè¨Ìä∏ÏóêÏÑú High ÏúÑÌóò Ïù¥ÏÉÅ ÏûàÎäîÏßÄ Í≤ÄÏÇ¨ Ï§ë..."
          ERRORS=$(jq '[.site[].alerts[].riskcode | tonumber] | map(select(. >= 3)) | length' reports/zap_report.json)
          if [ "$ERRORS" -gt 0 ]; then
            echo "‚ùå High ÏúÑÌóòÎèÑ $ERRORS Í±¥ Î∞úÍ≤¨Îê®! Î∞∞Ìè¨ Ï§ëÎã®."
            exit 1
          else
            echo "‚úÖ High ÏúÑÌóò ÏóÜÏùå. Í≥ÑÏÜç ÏßÑÌñâ."
          fi

  # 4. Îã®ÏúÑ/ÌÜµÌï© ÌÖåÏä§Ìä∏
  - name: pytest
    image: python:3.12
    environment:
      DJANGO_SETTINGS_MODULE: my_project.settings
    commands:
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - python manage.py migrate
      - pytest

  # 5. Bandit Ï†ïÏ†Å Î∂ÑÏÑù
  - name: bandit-analysis
    image: python:3.12
    commands:
      - apt-get update && apt-get install -y jq
      - pip install bandit
      - bandit -r core zapp my_project -f json -o analysis/bandit-report.json -x zapp/tests
      - |
        ERRORS=$(jq '.metrics._totals.high + .metrics._totals.medium' analysis/bandit-report.json)
        if [ "$ERRORS" -gt 0 ]; then
          echo "‚ùå Î∞∞Ìè¨ Ï§ëÎã®: Î≥¥Ïïà Ï∑®ÏïΩÏ†êÏù¥ ${ERRORS}Í±¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§."
          exit 1
        else
          echo "‚úÖ Î≥¥Ïïà Î∂ÑÏÑù ÌÜµÍ≥º: Ïã¨Í∞ÅÌïú Ï∑®ÏïΩÏ†êÏù¥ ÏóÜÏäµÎãàÎã§. Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§."
          fi

  # 6. Î∂ÄÌïò ÌÖåÏä§Ìä∏
  - name: locust-load-test
    image: python:3.11
    commands:
      - pip install locust pandas
      - locust --headless -f locustfile.py -u 200 -r 20 -t 3m --host https://chick-pay.com --csv=locust_result

  # 7. CloudWatch Î™®ÎãàÌÑ∞ÎßÅ
  - name: monitor-cloudwatch
    image: amazon/aws-cli
    commands:
      - aws cloudwatch get-metric-statistics \
          --namespace AWS/EC2 \
          --metric-name CPUUtilization \
          --dimensions Name=InstanceId,Value=i-0b2440e7ffbc23f5a \
          --start-time $(date -u -d '-10 minutes' +%Y-%m-%dT%H:%M:%SZ) \
          --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
          --period 60 \
          --statistics Average \
          --region ap-northeast-2 > cpu_result.json
      - python check_cpu.py

  # 8. DB Ïª§ÎÑ•ÏÖò Î™®ÎãàÌÑ∞ÎßÅ
  - name: monitor-db
    image: postgres:14
    environment:
      PGHOST: zappdb-2.cn68okq6sw53.ap-northeast-2.rds.amazonaws.com
      PGUSER: postgres
      PGPASSWORD: bemajor123!!
    commands:
      - psql -d postgres -c "SELECT numbackends FROM pg_stat_database WHERE datname='postgres';"

  # 9. Locust Í≤∞Í≥º Ï≤¥ÌÅ¨
  - name: check-locust-result
    image: python:3.11
    commands:
      - pip install pandas
      - python check_locust_result.py

trigger:
  branch:
    - main
    - feat/drone
