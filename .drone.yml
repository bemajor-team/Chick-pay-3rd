kind: pipeline
type: docker
name: deploy-for-main

steps:
  # 0. Docker Pull 단계 추가
  - name: pull-zap
    image: docker:dind
    pull: always # 이 옵션만 추가

    # volumes:
    # - name: dockersock
    # path: /var/run/docker.sock
    commands:
      - docker pull zaproxy/zap-stable:2.16.1

  # 1. ZAP 테스트 (기존과 동일)
  - name: zap-ajax-spider
    image: zaproxy/zap-stable:2.16.1
    commands:
      - zap-baseline.py -t https://chick-pay.com -r zap_report.html -g "ZapContext.context" -x zap_result.xml --fail-on-alert medium
  # volumes:
  #   - name: dockersock
  #     host:
  #       path: /var/run/docker.sock

  # # 1. ZAP 테스트
  # - name: zap-ajax-spider
  #   image: zaproxy/zap-stable:2.16.1
  #   commands:
  #     - zap-baseline.py -t https://chick-pay.com -r zap_report.html -g "ZapContext.context" -x zap_result.xml --fail-on-alert medium

  # - name: 리포트 업로드
  #   image: alpine
  #   when:
  #     status:
  #       - success
  #       - failure # 실패해도 리포트 업로드
  #   commands:
  #     - apk add --no-cache zip
  #     - zip zap_report.zip zap_report.html zap_result.xml
  #   artifacts:
  #     - zap_report.zip

  # 2. 단위 테스트, 통합 테스트 단계
  - name: pytest
    image: python:3.12
    environment:
      DJANGO_SETTINGS_MODULE: my_project.settings
    commands:
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - python manage.py migrate
      - pytest

  # 3. Bandit 정적 분석 단계
  - name: bandit-analysis
    image: python:3.12
    commands:
      - apt-get update && apt-get install -y jq
      - pip install bandit
      - bandit -r core zapp my_project -f json -o analysis/bandit-report.json -x zapp/tests
      - |
        ERRORS=$(jq '.metrics._totals.high + .metrics._totals.medium' analysis/bandit-report.json)
        if [ "$ERRORS" -gt 0 ]; then
          echo "❌ 배포 중단: 보안 취약점이 ${ERRORS}건 발견되었습니다."
          exit 1
        else
          echo "✅ 보안 분석 통과: 심각한 취약점이 없습니다. 배포를 계속합니다."
        fi

  # 4. 배포 단계
  - name: deploy
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ec2_host
      username: ubuntu
      key:
        from_secret: ssh_private_key
      port: 22
      script:
        - cd /home/ubuntu/Chick-pay-2nd
        - git fetch origin
        - git checkout ${DRONE_BRANCH}
        - git pull origin ${DRONE_BRANCH}
        - docker-compose down
        - docker-compose up -d --build
    timeout: 300

trigger:
  branch:
    - main
    - feat/drone
