kind: pipeline
type: docker
name: deploy-for-main

steps:
  # 2. 단위 테스트, 통합 테스트 단계
  - name: pytest
    image: python:3.12
    environment:
      DJANGO_SETTINGS_MODULE: my_project.settings
    commands:
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - python manage.py migrate
      - pytest

  # 3. Bandit 정적 분석 단계
  - name: bandit-analysis
    image: python:3.12
    commands:
      - apt-get update && apt-get install -y jq
      - pip install bandit
      - bandit -r core zapp my_project -f json -o analysis/bandit-report.json -x zapp/tests
      - |
        ERRORS=$(jq '.metrics._totals.high + .metrics._totals.medium' analysis/bandit-report.json)
        if [ "$ERRORS" -gt 0 ]; then
          echo "❌ 배포 중단: 보안 취약점이 ${ERRORS}건 발견되었습니다."
          exit 1
        else
          echo "✅ 보안 분석 통과: 심각한 취약점이 없습니다. 배포를 계속합니다."
        fi

  # 4. ZAP 자동화 스캔 단계
  - name: zap-full-automation
    image: docker:cli
    volumes:
      - name: zap_reports
        path: /drone/src/zap # git clone된 코드의 zap 폴더 (Drone 기준)
    commands:
      - cd /drone/src/zap
      - docker run --rm \
        -v $(pwd):/zap/wrk/:rw \
        --memory=1.5g \
        --cpus=2 \
        ghcr.io/zaproxy/zaproxy:stable \
        zap.sh -cmd -autorun /zap/wrk/zap-automation.yaml
      - |
        if grep -qi "High" reports/zap_report.html; then
          echo "❌ High 위험도 발견! 배포 중단."
          exit 1
        else
          echo "✅ High 위험도 없음. 배포 계속 진행."
        fi

  # 5. 배포 단계
  - name: deploy
    image: appleboy/drone-ssh
    settings:
      host:
        from_secret: ec2_host
      username: ubuntu
      key:
        from_secret: ssh_private_key
      port: 22
      script:
        - cd /home/ubuntu/Chick-pay-2nd
        - git fetch origin
        - git checkout ${DRONE_BRANCH}
        - git pull origin ${DRONE_BRANCH}
        - docker-compose down
        - docker-compose up -d --build
    timeout: 300

volumes:
  - name: zap_reports
    host:
      path: /drone/src/zap

trigger:
  branch:
    - main
    - feat/drone
