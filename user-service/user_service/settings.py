"""
Django settings for user_service project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path
import boto3
import json
from botocore.exceptions import ClientError
from pathlib import Path
from dotenv import load_dotenv




# Aws secret HJ code copy
def load_aws_secret(secret_name, region_name="ap-northeast-2"):
    """
    AWS Secrets Manager에서 비밀을 가져와 환경 변수로 설정합니다.

    :param secret_name: 저장된 secret 이름 (예: 'chickpay/prod/credentials')
    :param region_name: AWS 리전 (기본: ap-northeast-2 = 서울)
    """
    client = boto3.client("secretsmanager", region_name=region_name)

    try:
        response = client.get_secret_value(SecretId=secret_name)
        secret = json.loads(response['SecretString'])

        # 환경 변수로 설정
        for key, value in secret.items():
            os.environ[key] = value

    except ClientError as e:
        print(f"[ERROR] Failed to load secrets: {e}")
        raise e

load_aws_secret("koreano3")

# =======================
# 시크릿 로드 (운영 환경에서만)
# =======================
# SECRET_NAME = os.getenv("AWS_SECRET_NAME", "koreano3")
# if os.getenv("USE_AWS_SECRETS", "false") == "true":
#     load_aws_secret(SECRET_NAME)

# =======================
# 환경변수/시크릿에서 값 읽기 함수
# =======================
def get_config(key, default=None):
    return os.getenv(key, default)

# =======================
# Django 기본 설정
# =======================
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = get_config("DJANGO_SECRET_KEY", "unsafe-secret-key")
DEBUG = get_config('DJANGO_DEBUG', 'True') == 'True'
ALLOWED_HOSTS = get_config('DJANGO_ALLOWED_HOSTS', '*').split(',')

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / '.env')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': os.environ.get('DB_USER'),
        'NAME': os.environ.get('DB_NAME'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'ATOMIC_REQUESTS': True  # 요청 단위 트랜잭션'

    }
}
AUTH_USER_MODEL = 'user_app.CustomUser'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    'user_app',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_service.wsgi.application'

# =======================
# CORS/CSRF 설정
# =======================
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]
CSRF_COOKIE_SAMESITE = "None"


SESSION_COOKIE_AGE = 1800000000
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_DOMAIN = None


CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_DOMAIN = None




# =======================
# 기타 Django 설정
# =======================
LANGUAGE_CODE = 'ko-kr'
TIME_ZONE = 'Asia/Seoul'
USE_I18N = True
USE_TZ = True

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}





# AWS 설정
# AWS 인증 정보 (환경변수로도 설정 가능)
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
AWS_S3_SIGNATURE_VERSION = 's3v4'

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_CUSTOM_DOMAIN = 'd13g1etgrsjc85.cloudfront.net'

# 개발환경에서는 반드시 True
DEBUG = True

# 디버그 설정에 따른 static url 변경
if DEBUG:
    STATIC_URL = "/static/"
else:
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# 디버그 설정에 따른 로컬과 ec2 환경 스태틱파일 경로 변경
if DEBUG:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
else:
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
        },
    }

